/----------------------------------------------
/----------------------------------------------
ARRAYS: 

* array decay (array to pointer conversion)
* arrays are not assignable !!!
* but in cpp there is a container called array can be assignable
* diziler fonksiyonlara parametre olarak atanamazlar. Ancak fonksiyonlara argüman olarak gönderilebilirler. 
* diziler fonksiyonlarýn geri dönüþ deðerleri olamazlar.
* diziler birbirlerine atanamazlar.
* dizi indexleri tamsayý olmak zorundadýr. Genelde isimlendirilmiþ sabitler kullanýlmaktadýr (macrolar).

#define SIZE 10
int a[SIZE]; // instead of int a[10];

/----------------------------------------------
/----------------------------------------------

* operators: 
&x   --> address of x 
*ptr --> dereferencing operator
->   --> member selection operator
[]   --> subscript operator (pointer operator)

/----------------------------------------------
/----------------------------------------------

* a[i] ile dizinin i indexli elemanýna eriþilmektedir.
* diziler 0 deðerinden baþlanarak indexlenmektedir.
* int a[100]; --> ilk eleman : a[0] 
			  --> son eleman : a[99]
			  --> a[100] : hata deðil, ancak diziye dahil deðil!!!
* a[expr] --> exp>= 0 && exp<size olmalýdýr
* derleyiciler index doðruluðunu compile time sýrasýnda kontrol edemez. Bu kontrol programcýnýn kontrolündedir. 
* Eðer diziye ait olmayan bir indexe eriþmek istenildiðinde --> undefined behaviour

* [] () . -> --> 1. Level Operators * 

int a[100];
int number = 20;
a[9] = number;
func(a[7]);
a[5] = 10; --> L-Value
++a[5];
&a[5];
~a[5]; // bitsel deðil operatorü

* dizi elemanlarý, bellekte birbiri ardýna sýralanarak saklanmaktadýr. 

int a[4];    --> bellekte tek blok altýnda saklanýr.
int x,y,z,t; --> bellekte tek blok altýnda saklanmaz.bu durumu garantiye almak için dizide saklanmalarý gerekmektedir. 

* If local arrays are not initialized, they have got garbage values. 
  - int a[100]; --> indetermined (garbage) value 
* If global arrays and static local arrays are not initialized, they have got zero values. 

/----------------------------------------------
/----------------------------------------------

* Example: The values of arrays defined in different scopes. 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define SIZE 5
int g_array[SIZE];

int main() {

	static int s_array[SIZE];

	for (int i = 0; i < SIZE; ++i)
		printf("static arrays[%d] : %d\n", i, s_array[i]);

	/* static arrays[0] : 0
	   static arrays[1] : 0
	   static arrays[2] : 0
	   static arrays[3] : 0
	   static arrays[4] : 0 */

	printf("\n\n");

	int l_array[SIZE];
	for (int i = 0; i < SIZE; ++i)
		printf("local arrays[%d] : %d\n", i, l_array[i]);

	/*  local arrays[0] : -858993460
		local arrays[1] : -858993460
		local arrays[2] : -858993460
		local arrays[3] : -858993460
		local arrays[4] : -858993460 */

	printf("\n\n");

	for (int i = 0; i < SIZE; ++i)
		printf("global arrays[%d] : %d\n", i, g_array[i]);

	/*  global arrays[0] : 0
		global arrays[1] : 0
		global arrays[2] : 0
		global arrays[3] : 0
		global arrays[4] : 0 */
}

/----------------------------------------------
/----------------------------------------------

* Warning ayarlarýnýn maksimuma çekilmesi nasýl saðlanmaktadýr ? 
- Deðiþkene ilk deðer vermemek deðil, ilk deðer vermeden kullanmak problem yaratmaktadýr. 
int x;
prinff("x = %d\n", x);
for(x = 0; x< SIZE; ++x){};

- Bir deðiþkeni tanýmlarken ilk deðer vermek CPP için genel geçer kuraldýr. 
- CPP --> deðiþken tanýmý ilk deðer belirlendiðinde yapýlmalýdýr. 
- C --> tanýmlama yapýlýrken ilk deðer verilmeyebilir. Linux core kodlarýnda da kullanýmý bu þekildedir.

/----------------------------------------------
/----------------------------------------------

- Variable Length Array (VLA) : 
  - dizi indexlerinin dinamik olarak tanýmlanmasýný saðlayan araçtýr. 
  - C11 standartlarý ile bu araç opsiyonel hale getirildi. Yani derleyici bu araç için destek saðlayabilir ya da saðlamaz.
  - Bu araç Cpp'de tanýmlý olmadýðýndan hata verecektir. 
  - Normalde kullanýmý tercih edilmemelidir.
  - VS2019 C99 desteðini arttýðý için kullanýmý tercih edilmelidir.

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void func(int n) {
	int a[10] = {0};
	//...
	a[n] = 5; // C   --> VLA kullanýmý söz konusu
	          // CPP --> Error
}

int main() {

	int x = 10;
	int a[x];     // Error: expression must have a constant value

	const int n = 20;
	int array[n]; // Error : expression must have a constant value
}

/----------------------------------------------
/----------------------------------------------

* Example: Compiler doesnt know the return value of function in compile time. That's why, the size of defined array can not be known in compile time either. 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int foo(void) {}

int main() {

	int a[10] = { 0 };
	//...
	a[foo()] = 5; // undefined behaviour --> depends on the function return value

}

/----------------------------------------------
/----------------------------------------------

Array Initialization (Dizilere ilk deðer verilmesi)


/----------------------------------------------
/----------------------------------------------

* Example: Array Initialization with {} 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define SIZE 5

int main() {

	int array[5] = { 1, 2, 3, 4, 5 };

	for (int i = 0; i < SIZE; ++i)
		printf("arrays[%d] : %d\n", i, array[i]);

	/*  arrays[0] : 1
		arrays[1] : 2
		arrays[2] : 3
		arrays[3] : 4
		arrays[4] : 5 */
}

/----------------------------------------------
/----------------------------------------------

* Example: What happened if array initialization is provided with more than array size or less than array size? 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define SIZE 5

int main() {

	// int array[5] = { 1, 2, 3, 4, 5, 6 }; // Compile time error
	// int array[SIZE] = { 1, 2, 3, }; // not error - trailing comma
	int array[SIZE] = { 1, 2, 3 }; 

	for (int i = 0; i < SIZE; ++i)
		printf("arrays[%d] : %d\n", i, array[i]);

	/*  arrays[0] : 1
		arrays[1] : 2
		arrays[2] : 3
		arrays[3] : 0
		arrays[4] : 0 */
}

/----------------------------------------------
/----------------------------------------------

* Example: 
  - Küme parantezinin içi C 'de boþ býrakýlamaz. 
  - CPP'de boþ býrakýlabilir. 
  - trailing comma kullanýmý dizi boyutunun belirlenmesinde etkili deðildir. 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define SIZE 5

int main() {

	int array[SIZE] = { 0 }; // first index of array is assigned with 0 

	for (int i = 0; i < SIZE; ++i)
		printf("arrays[%d] : %d\n", i, array[i]);

	/*  arrays[0] : 0
		arrays[1] : 0
		arrays[2] : 0
		arrays[3] : 0
		arrays[4] : 0 */
}

/----------------------------------------------
/----------------------------------------------

* Example: Specifying the length of array with initialization

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {

	// int array[]; // Syntax Error - in local level
	int array[] = { 1, 2, 3 }; // array size is defined in compile time 
	int length = sizeof(array) / sizeof(array[0]);

	for (int i = 0; i < length; ++i)
		printf("arrays[%d] : %d\n", i, array[i]);

	/*  arrays[0] : 1
		arrays[1] : 2
		arrays[2] : 3 */
}

/----------------------------------------------
/----------------------------------------------

* Example: designated initializer (C++20)
  - designated initializer CPP için sýralý olarak verilmek zorundadýr

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define SIZE 5

int main() {

	int array[SIZE] = { [1] = 59, [2] = 15, [3] = 10};
	//int length = sizeof(array) / sizeof(array[0]);

	for (int i = 0; i < SIZE; ++i)
		printf("arrays[%d] : %d\n", i, array[i]);

	/*  arrays[0] : 0
		arrays[1] : 59
		arrays[2] : 15
		arrays[3] : 10
		arrays[4] : 0 */
}

/----------------------------------------------
/----------------------------------------------

* Example: designated initializer (C++20)

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {

	int array[] = { [4] = 59, [5] = 15, [6] = 3 };
	int length = sizeof(array) / sizeof(array[0]);

	for (int i = 0; i < length; ++i)
		printf("arrays[%d] : %d\n", i, array[i]);

	/*  arrays[0] : 0
		arrays[1] : 0
		arrays[2] : 0
		arrays[3] : 0
		arrays[4] : 59
		arrays[5] : 15
		arrays[6] : 3 */
}

/----------------------------------------------
/----------------------------------------------

* Example: Array initialization and compiler extentions 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {

	int x = 10, y = 20, z = 30, t = 40;
	int array[] = {x, y, z+t, t-x}; 
	// Normally it should be an error
	// However some compiler extensions provide this spec. (Ex. gcc)
	
	int length = sizeof(array) / sizeof(array[0]);
	for (int i = 0; i < length; ++i)
		printf("arrays[%d] : %d\n", i, array[i]);

	/*  arrays[0] : 10
		arrays[1] : 20
		arrays[2] : 70
		arrays[3] : 30 */
}

/----------------------------------------------
/----------------------------------------------

* Data structures :
  - verilerin bellekte nasýl tutulacaðýnýn belirlenmesi --> data structure 
    - dynamic array
	- linked list (singly linked list, doubly linked list, rotating linked list, etc. )
	- trees (binary search tree, etc.)
	- hash table
	- deque
  - Örneðin; bir veri kümesi içinde spesifik bir veri aranýyorsa, hash table veya binary searzh tree kullanýmý uygun olacaktýr. 
  - time ve space complexity açýsýndan uygun olan veri yapýsýnýn seçilmesi tercih edilmelidir.
  
* Algorithms: 
  - iþin nasýl yapýlacaðýnýn belirlenmesi ve buna göre uygun veri yapýsýnýn seçilmesi --> algoritma 
  - iþlemlerin belli bir sequence'e göre gerçeklenmesi saðlanýr. 

* The complexity of algorithm:
  - kriterlere göre belirlenmektedir. 
  - örneðin kriter zaman olarak belirlenebilir. Ancak bu karþýlaþtýrma çok uygun olmayabilir. Çünkü kriter olarak "zaman" donanýma, derleyicinin optimizasyon yeteneðine ve kaç veri üzerinde karþýlaþtýrma yapýldýðýna göre deðiþecektir. 
  - Genel olarak, üç duruma göre karþýlaþtýrma gerçekleþtirilmektedir: 
    - best case
	- worst case  --> bu duruma göre ölçüm yapýlmasý tercih edilmektedir. 
	- average case
  - Big O Notation: to specify the algorithm complexity
    - veri yapýsýndaki öðe sayýsý ile maliyetin artmasý arasýndaki iliþki ölçülmektedir. 
	- constant time algorithm --> veri yapýsýndaki öðe sayýsýnýn artmasý ile maliyetin (yapýlan iþlem miktarý tarafýndan belirlenir) artmamasý
	- linear complexity --> veri yapýsýndaki öðe sayýsý ile maliyetin orantýlý artmasý
	- square complexity(?) --> veri yapýsýndaki öðe sayýsýnýn karesi ile maliyetin orantýlý artmasý

/----------------------------------------------
/----------------------------------------------

* O(1)     --> constant time algorithm 
  O(logn)  --> logaritma 2 tabanýnda orantýlý complexity (low complexity)
           --> algoritmada sürekli ikiye bölme durumu söz konusu ise
		   --> ex: binary search algorithm
  O(n)     --> linear complexity (n veri sayýsý - O(c*n) c constant olarak düþünülebilir.)       --> c farklý katsayýlar olsa bile O(n) ile belirtilir.
  O(nlogn) --> 
  O(n^2)    --> karesi ile orantýlý complexity 
            --> iç içe iki döngü varsa ve her bir döngü verideki eleman sayýsý kadar dönüyorsa 
  O(n^3)    --> complexity in proportion to the cube of data  
  O(2^n)   --> high complexity 
  O(n!)    --> high complexity 

- bir dizide belli bir dizideki elemana ulaþmak her zaman constnt complexity (O(1))
- dizideki eleman sayýsýnýn artmasý ölçüsünde worst case artýyorsa linear (O(n))
- bir dizinin tersine çevrilmesi probleminde her defasýnda dizinin baþtaki deðeri ile sonda kendi indisine denk gelen deðerin yerinin deðiþtirilmesi gerekmektedir. Dizinin yarýsý oranýnda iþlem gerçekleþtirilir. Dolayýsýyla dizideki eleman sayýsý arttýkça  iþlem sayýsý doðru orantýlý olarak artacaktýr --> linear complexity (O(n))
- farklý adýmlardan oluþan algoritmalar için, complexity deðeri en yüksek olan adým ile tüm algoritmanýn karmaþýklýðý temsil edilir. 

/----------------------------------------------
/----------------------------------------------

Aþapýdaki sebeplerden ötürü algoritma karmaþýklýðýný etkilemektedir. 
Ancak belli bir n deðerinden sonra mutlaka bir algoritma karmaþýklýðý diðerine göre daha lightweight olacaktýr. 
- compiler optimization
- iþlemcinin özel komutlarý
- veri yapýsýndaki elemanlarýn izafi durumu 


/----------------------------------------------
/----------------------------------------------

Veri yapýsý üzerinde yapýlan en temel iþlemler: 
- Insertion / Eraser iþlemleri
- dinamik diziye sondan yapýlan ekleme/silme iþlemleri --> constant complexity 
- dinamik dizinin herhangi bir noktasýndan yapýlan ekleme silme iþlemleri --> linear comp.
- dinamik dizi üretimde en fazla kullanýlan veri yapýsýdýr. 
- C deki dizi yapýsý  dinamik diiz yapýsý ile ayný; ancak diziye ekleme ve silme iþlemi uygulanamaz. Bunlar fixed array olarak isimlendirilir. dizinin hayatý devam ettði sürece "size"  ayný kalacaktýr.
- Eðer C'de dinamik dizi oluþturulmak istenirse 

/----------------------------------------------
/----------------------------------------------

* Example: 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define SIZE 10

void dline(void) {
	printf("\n-----------------------------------------------------\n");
}

void randomize(void) {
	srand((unsigned int)time(NULL));
}

void set_random_array(int *ptr, int size)
{
	while (size--) {
		*ptr++ = rand() % 1000;
	}
}

void print_array(const int *ptr, int size)
{
	for (int i = 0; i < size; ++i)
	{
		if (i && i % 20 == 0)
			printf("\n");
		printf("%3d ", ptr[i]);

	}
	dline();
}

int main() {

	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	print_array(a, SIZE);

	// 463 300 523 225 432 682 348 551 629 607
}

/----------------------------------------------
/----------------------------------------------

* Example: 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>

#define SIZE 10

void dline(void) {
	printf("\n-----------------------------------------------------\n");
}

void randomize(void) {
	srand((unsigned int)time(NULL));
}

void set_random_array(int *ptr, int size)
{
	while (size--) {
		*ptr++ = rand() % 1000;
	}
}

void print_array(const int *ptr, int size)
{
	for (int i = 0; i < size; ++i)
	{
		if (i && i % 20 == 0)
			printf("\n");
		printf("%3d ", ptr[i]);

	}
	dline();
}

int main() {

	int a[SIZE];
	int sum = 0;
	double mean;
	double sum_square = 0;
	double std_dev;

	randomize();
	set_random_array(a, SIZE);
	print_array(a, SIZE);

	// sum
	for (int i = 0; i < SIZE; ++i) // O(n)
	{
		sum += a[i];
	}
	printf("sum  : %d\n", sum);

	// mean 
	mean = (double)sum / SIZE;
	printf("mean : %f\n", mean);

	// standard deviation
	for (int i = 0; i < SIZE; ++i)  // O(n)
	{
		sum_square += (a[i] - mean)* (a[i] - mean);
	}

	std_dev = sqrt(sum_square / SIZE);
	printf("standard deviation : %f\n", std_dev);

	/* 
	The complexity of all  algorithm --> O(n)
	449 349 369 977 379 254 700  50 467 155
	-----------------------------------------------------
	sum  : 4149
	mean : 414.900000
	standard deviation : 252.079928
	*/
}

/----------------------------------------------
/----------------------------------------------

* Example: 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>

#define SIZE 10

void dline(void) {
	printf("\n-----------------------------------------------------\n");
}

void randomize(void) {
	srand((unsigned int)time(NULL));
}

void set_random_array(int *ptr, int size)
{
	while (size--) {
		*ptr++ = rand() % 1000;
	}
}

void print_array(const int *ptr, int size)
{
	for (int i = 0; i < size; ++i)
	{
		if (i && i % 20 == 0)
			printf("\n");
		printf("%3d ", ptr[i]);

	}
	dline();
}

// Linear Search Algorithm
int main() {

	int a[SIZE];
	int value;
	int flag = 0;
	int i; 

	randomize();
	set_random_array(a, SIZE);
	print_array(a, SIZE);

	printf("Enter a number : ");
	scanf("%d", &value);

	for (i = 0; i < SIZE; ++i) 
	{
		if (a[i] == value) {
			flag = 1;
			break;
		}
		
	}
	if (flag)
		printf("Found !!! The array index is: %d \n", i);
	else
		printf("Not Found !!! \n");

	// Test code: Found
	/*
		896 533 109 657 216  92 260 987 838 305
		---------------------------------------------------- -
		Enter a number : 216
		Found !!!The array index is : 4
	*/

	// The complexity of algorithm : O(n)
	// Test code: Not Found
	/*
		85 348 655  73 637 466 942  45 238 165
		---------------------------------------------------- -
		Enter a number : 12
		Not Found !!!

	*/
}

/----------------------------------------------
/----------------------------------------------

* Example: The same example, but not using flag to control whether we are out of the for loop ot not !!!

// Linear Search Algorithm
int main() {

	int a[SIZE];
	int value;
	int i; 

	randomize();
	set_random_array(a, SIZE);
	print_array(a, SIZE);

	printf("Enter a number : ");
	scanf("%d", &value);

	for (i = 0; i < SIZE; ++i) 
	{
		if (a[i] == value) {
			break;
		}
		
	}
	if (i < SIZE)
		printf("Found !!! The array index is: %d \n", i);
	else
		printf("Not Found !!! \n");
}

/----------------------------------------------
/----------------------------------------------

* Example: The same example, but with optimized for-loop


// Linear Search Algorithm
int main() {

	int a[SIZE];
	int value;
	int i; 

	randomize();
	set_random_array(a, SIZE);
	print_array(a, SIZE);

	printf("Enter a number : ");
	scanf("%d", &value);

	for (i = 0; i < SIZE && a[i] != value; ++i)
		; // null statement

	if (i < SIZE)
		printf("Found !!! The array index is: %d \n", i);
	else
		printf("Not Found !!! \n");
}

/----------------------------------------------
/----------------------------------------------

* Example: Dizide ayný deðerden kaç tane olduðunu bulma 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

#define SIZE 100

void dline(void) {
	printf("\n-----------------------------------------------------\n");
}

void randomize(void) {
	srand((unsigned int)time(NULL));
}

void set_random_array(int *ptr, int size)
{
	while (size--) {
		*ptr++ = rand() % 100;
	}
}

void print_array(const int *ptr, int size)
{
	for (int i = 0; i < size; ++i)
	{
		if (i && i % 20 == 0)
			printf("\n");
		printf("%3d ", ptr[i]);

	}
	dline();
}

// Linear Search Algorithm
int main() {

	int a[SIZE];
	int value;
	int i; 
	int counter = 0;

	randomize();
	set_random_array(a, SIZE);
	print_array(a, SIZE);

	printf("Enter a number : ");
	scanf("%d", &value);


	for (i = 0; i < SIZE; ++i)
	{
		if (a[i] == value) {
			printf("The index of value : a[%d]\n", i);
			++counter;
		}

	}

	if (counter)
		printf("The total count : %d \n", counter);
	else 
		printf("Not Found !!! \n");

	/*
	10  14  41  62  14  81  22  67  53  20  91  57  19  14  95  47  70  28  98  86
	46  71  81  13  16  61  20  47  66  44   8  40  62  31  27  36  77  33  51  84
	78  35  85  59  95  69  90  64  63  92   6  80  28  34  12  87  87  63  86  30
	6  75  65  28  41  80  20  84   8  58  49  77  40  59  32  17  84  63  99  75
	98  88  45  81   2  39  31  25  58  96  36  54  39  18  16  12  19  66  27   0
	---------------------------------------------------- -
	Enter a number : 28
	The index of value : a[17]
	The index of value : a[52]
	The index of value : a[63]
	The total count : 3
	*/
}

/----------------------------------------------
/----------------------------------------------

* Example: The question from Donald Knuth on the previous code
  - Donald Knuth - The Art of Computer Programming 
  - i<SIZE, ++i, a[i] == value --> toplamda 3 iþlem var olduðu kabul edilirse; 
  - for loop'unu iki iþlem kullanýlarak gerçekleyiniz !!!


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

#define SIZE 100

void dline(void) {
	printf("\n-----------------------------------------------------\n");
}

void randomize(void) {
	srand((unsigned int)time(NULL));
}

void set_random_array(int *ptr, int size)
{
	while (size--) {
		*ptr++ = rand() % 1000;
	}
}

void print_array(const int *ptr, int size)
{
	for (int i = 0; i < size; ++i)
	{
		if (i && i % 20 == 0)
			printf("\n");
		printf("%3d ", ptr[i]);

	}
	dline();
}

int main() {

	int a[SIZE];
	int value;
	int i; 

	randomize();
	set_random_array(a, SIZE);
	print_array(a, SIZE);

	printf("Enter a number : ");
	scanf("%d", &value);


	for (i = 0; i < SIZE; ++i) {
		if (a[i] == value) 
			break;
	}
		
	if (i == SIZE)
		printf("NOT FOUND !!!\n");
	else 
		printf("FOUND !!! The array index : %d\n", i);
}

/----------------------------------------------
/----------------------------------------------

* Example: Reverse Algorithm
  - Dizinin eleman sayýsýnýn yarýsý için olan bir döngüde , baþtaki ve sondaki elemanlarýn yer deðiþtirmesi
  - Dizideki eleman sayýsý tek olduðunda da sonuç deðiþmeyecektir. Son kalan eleman baþka bir elemanla yerini deðiþtirmeyecek.

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

#define SIZE 10

void dline(void) {
	printf("\n-----------------------------------------------------\n");
}

void randomize(void) {
	srand((unsigned int)time(NULL));
}

void set_random_array(int *ptr, int size)
{
	while (size--) {
		*ptr++ = rand() % 1000;
	}
}

void print_array(const int *ptr, int size)
{
	for (int i = 0; i < size; ++i)
	{
		if (i && i % 20 == 0)
			printf("\n");
		printf("%3d ", ptr[i]);

	}
	dline();
}

int main() {

	int a[SIZE];
	int value;
	int i; 

	randomize();
	set_random_array(a, SIZE);
	print_array(a, SIZE);

	for (i = 0; i < SIZE/2; ++i) {
		int temp = a[i];
		a[i] = a[SIZE - 1 - i];
		a[SIZE - 1 - i] = temp; 
	}

	print_array(a, SIZE);
	/*
	461 959 584 646 544 614 373 244 155   3
	-----------------------------------------------------
    3 155 244 373 614 544 646 584 959 461
	-----------------------------------------------------
	*/
}

/----------------------------------------------
/----------------------------------------------

* Sizeof Operator:
  - Anahtar sözcük ile ifade edilen tek operatordür.
  - Compile time operator (excep that VLA)
  - sizeof operatörü ile oluþturulan ifade bir sabit ifadesidir. 
  - ürettiði deðer bir tamsayýdýr (unsigned).
  - ürettiði deðerin türü derleyiciye baðlý olmak üzere aþaðýdakilerden biri:
    - unsigned int 
	- unsigned long int
	- unsigned long long int 
  - size_t ise bu türleri temsil eden bir aliastýr. Like as: 
    typedef unsigned int size_t; 
  - en sýk yapýlan hatalardan biri sizeof operatörü ile oluþturulmuþ bir ifadeyi signed int türünden bir ifade ile iþleme sokulduðunda --> iþlem sonucu verinin türü unsigned olana göre convert edilecektir. 
  - bir data tipinin  bellekte kaç byte yer kapladýðýný göstermektedir. C'de data tiplerinin kapladýklarý alan derleyiciye baðlý olarak deðiþmektedir. Peki derleyici iþletim sistemine baðlý mýdýr???
  - Kullanýmý:
    - unary bir operator
	- Ýkinci öncelik seviyesindedir (second level priority)
	  1. level : () [] . ->
	  2. level :  sizeof()
	  printf("sizeof(int) : %zu\n", sizeof(int));
	  unsigned int       --> %u 
	  unsigned lond      --> %lu
	  unsigned long long --> %llu
	  size_t --> %zu conversion specifier eklenmiþtir. 
   - constant expression olduðundan --> int array[sizeof(int)];
   - sizeof operatörü tek operand aldýðýnda parantez kullanýmýna ihtiyaç duyulmaz. 
   - sizeof operatörü iþlem kodu üretmez, sadece tür bilgisi ile ilgilenir. 
     sizeof(++x); --> x data type 
/----------------------------------------------
/----------------------------------------------

*Example: 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {
	int value;
	int array[sizeof(int)];
	double dvalue;
	
	sizeof 5;
	sizeof value;
	sizeof array;
	sizeof dvalue;
	sizeof dvalue + 3.4; // = sizeof(dvalue) + 3.4;

	printf("sizeof dvalue : %zu\n", sizeof dvalue);             
	// sizeof dvalue : 8

	printf("sizeof dvalue + 3.4 : %zu\n", sizeof dvalue + 3.4); 
	// sizeof dvalue + 3.4 : 3435973837
}

/----------------------------------------------
/----------------------------------------------

*Example: 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {

	int value = 10;
	char c1 = 4, c2 = 5;

	printf("sizeof dvalue : %zu\n", sizeof value);
	printf("sizeof dvalue : %zu\n", sizeof(value));
	printf("sizeof dvalue : %zu\n", sizeof(value+3.4));
	printf("sizeof dvalue : %zu\n", sizeof(c1+ c2)); // !!! integral promotion !!!

	/*
	sizeof dvalue : 4
	sizeof dvalue : 4
	sizeof dvalue : 8
	sizeof dvalue : 4
    */
}

/----------------------------------------------
/----------------------------------------------

*Example: 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {

	int value = 10;
	printf("sizeof value+5 : %zu\n", sizeof value+5);  //sizeof value+5 : 9
	printf("sizeof(value+5): %zu\n", sizeof(value+5)); //sizeof(value+5): 4
}

/----------------------------------------------
/----------------------------------------------

*Example: 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {

	int ivalue = 10;
	unsigned int uivalue = sizeof(++ivalue);
	printf("uivalue : %u\n", uivalue);  // uivalue: 4
	printf("ivalue  : %d\n", ivalue);   // ivalue : 10
}

/----------------------------------------------
/----------------------------------------------

*Example: 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int func(void) {
	printf("func() is called!!\n");
	return 1;
}

int main() {

	int ivalue = 20;
	unsigned int uivalue = sizeof(func());
	printf("uivalue : %u\n", uivalue);// uivalue: 4 --> not calling func()
}

/----------------------------------------------
/----------------------------------------------

*Example:  
 - sizeof operatörünün operandý array olduðu durumda,  
 - sizeof array --> kullanýmý array'ýn toplamda kapladýðý alaný verecektir. 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {

	int array[10] = { 0 };
	char carray[20] = { 0 };
	double darray[30] = { 0 };

	printf("sizeof(&array[0]) : %zu\n", sizeof(array[0])); 
	printf("sizeof array      : %zu\n", sizeof array); 
	// sizeof(&array[0]) : 4
	// sizeof array      : 40 --> (10 x 4 byte)

	printf("sizeof(&carray[0]) : %zu\n", sizeof(carray[0]));
	printf("sizeof carray      : %zu\n", sizeof carray);
	// sizeof(&carray[0]) : 1
	// sizeof carray      : 20 --> (20 x 1 byte)

	printf("sizeof(&darray[0]) : %zu\n", sizeof(darray[0]));
	printf("sizeof darray      : %zu\n", sizeof darray);
	// sizeof(&darray[0]) : 4
	// sizeof darray      : 240 --> (30 x 8 byte)
}

/----------------------------------------------
/----------------------------------------------

*Example: The size of array with sizeof operator

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main() {

	int array[10] = { 0 };
	char carray[20] = { 0 };
	double darray[30] = { 0 };

	printf("The size of array : %zu\n", sizeof(array) / sizeof(array[0]));
	printf("The size of carray: %zu\n", sizeof(carray) / sizeof(carray[0]));
	printf("The size of darray: %zu\n", sizeof(darray) / sizeof(darray[0]));

	/*
	The size of array : 10
	The size of carray : 20
	The size of darray : 30
	*/
}

/----------------------------------------------
/----------------------------------------------

*Example: The size of dynamic arrays with sizeof operator

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define array_size(x)  (sizeof(x)) / (sizeof((x)[0]))

int main() {

	int array[] = { 12, 25, 56, 89, 55, 32, 56, 78 };

	for (int i = 0; i < array_size(array); ++i)
		printf("%d ", array[i]);
}

/----------------------------------------------
/----------------------------------------------

*Example: The size of dynamic arrays with sizeof operator

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define array_size(x)  (sizeof(x)) / (sizeof((x)[0]))

int main() {

	int array[] = { 12, 25, 56, 89, 55, 32, 56, 78 };
	int numbers[2 * array_size(array)] = { 0 };

	for (int i = 0; i < array_size(numbers); ++i)
		printf("%d ", numbers[i]);
	    // 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
}

/----------------------------------------------
/----------------------------------------------

*Example: The size of dynamic arrays with sizeof operator
 - array_size(array) - 2 --> sonucu unsigned old.
 - i < array_size(array) - 2 --> iþaretsiz türe dönüþüm yapýlýr. 
 - i en büyük tam sayýnýn bir altý olacaktýr ve bu durumda i < array_size(array) - 2 iþlemi tanýmsýz olacaktýr. 
 - Dolayýsýyla ekrana herhangi bir sonuç yazýlamaz. 


#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define array_size(x)  (sizeof(x)) / (sizeof((x)[0]))

int main() {

	int array[] = { 1,2,3,4,5 };

	for (int i = -2; i < array_size(array) - 2; ++i)
		printf("%d ", array[i + 2]);
		// nothing prints 
}


/----------------------------------------------
/----------------------------------------------

*Example: 
 - Normally, this code prints 1 2 3 4 5
 - But, the warning message labelled as C6294 is received in my compiler

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define array_size(x)  (sizeof(x)) / (sizeof((x)[0]))

int main() {

	int array[] = { 1,2,3,4,5 };

	for (int i = -2; i < (int)array_size(array) - 2; ++i)
		printf("%d ", array[i + 2]);

	// Warning	C6294	Ill - defined for - loop:  initial condition does not satisfy test.Loop body not executed. 
}

/----------------------------------------------
/----------------------------------------------

*Example: 
 - using "i[array]" instead of "array[i]"
 - because of pointers 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define array_size(x)  (sizeof(x)) / (sizeof((x)[0]))

int main() {

	int array[] = { 1,2,3,4,5 };

	for (int i = 0; i < array_size(array); ++i)
		printf("%d ", i[array]);
	    // 1 2 3 4 5
}

/----------------------------------------------
/----------------------------------------------
