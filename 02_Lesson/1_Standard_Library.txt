## Standard Library

- Standard Library aþaðýdaki bileþenlerden oluþmaktadýr:
  - standard C functions
  - standard user defined types
    - struct tm tx; // tm is a user defined types from standard lib.
  - standard macros (object like macros, function like macros)
    - int x = RAND_MAX; // RAND_MAX is a macro from <time> file
  - standard type alias
    - time_t timer; // time_t is a type alias from standard lib.


/----------------------------------------------
/----------------------------------------------

### Standard C Functions

- These functions provide common interface and portability (for example: abs(..), strcpy(..), strcat(..), etc.) 

- With C89 --> C99 --> C11, the number of standard c functions has increased.

- The C standard library consists of modules of header files ( for example: stdio.h, string.h, math.h, stdlib.h, etc.). The declarations of standard C functions are in these header files. 

- For example, the definitions of all C functions in the stdlib.h file are pasted at compile time wherever this file is included. Since this process happens during the compile time, it doesn't slow down the program. Generally, the processes that create workload during run-time cause the program to slow down.

- The definitions of standard C functions cannot be reached by using header files. Instead, compiled versions of them are available as object code in compilers. Compiled versions of these functions are used during run-time. That is, they are included in the written source code.

- Standards do not dictate how C functions will be implemented. They just make suggestions about it. For this reason, different compilers may have implemented standard functions differently.

- Plaguer's "Standard C Library" book provides examples of implementation for standard C functions. 

- Since there is no function overloading mechanism in the C programming language, there are different definitions for the same function in the standard library. For example: 
  - int abs(int);
    double fabs(double);

- Functions such as printf, scanf are defined as variadic functions in the standard library. For these functions, arguments must be sent to the parameters up to the variadic parameter. Variadic parameter representation is provided by the ellipsis token (...). 
  - int printf(const char* ptr, ...); // return value is int type
  - scanf(const char* ptr, ...);
    
/----------------------------------------------
/----------------------------------------------



### Standard Library 

- Dilin kurallarinin on gordugu sekilde dilin derleyicisinin kullaniciya sundugu kodlardir.

- Standard C fonksiyonlari standard kutuphanenin bilesenlerinden biridir. 

- 3rd party library function is not a part of standard library

/----------------------------------------------
/----------------------------------------------

- **Example** : Standard library usage

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <time.h>
#include <stdlib.h>

int main()
{
	int x = RAND_MAX; // standard macro
	struct tm tx;     // standard type 
	time_t timer;     // standard type alias
	time(&timer);     // standard function

	return 0;
}

/----------------------------------------------
/----------------------------------------------

- C de neden standart fonksiyonlar bulunur? 
  - common interface saglamasi 
  - programci tarafindan yazilmasina gerek kalmamasi ve test edilmesi 
  - domain bilgisi gerektirmesi sebebiyle fonksiyonun yazilmasinin zor olmasi
  - programci tarafindan yazilan fonksiyonlarin effeciency acisindan dusuk olma ihtimali 
  - kod optimizasyonu acisindan compiler larin daha guclu olmasi
  - tasinabilirlik saglamasi (portability)

- standart fonksiyonlarin tanimlamalari (definition) derleyicide bulunmaz, derlenmis halleri (object code) bulunur. 
  - Plaguer --> The Standard C Library Book 

- bir standart baslik dosyasi eklendiginde bu baslikta bulunan fonksiyonlarin hepsinin bildirimleri de dosyaya eklenmis olur, fonksiyonlarin tanimlari degil ancak
derlenmis halleri bulunmaktadir. 

- <math.h>
  double sqrt(double);
  double pow(double base, double exp);
  double sin(double);
  int abs(int); --> returns abs value for an integer argument 
  double fabs(double); --> returns abs value for a double argument 

/----------------------------------------------
/----------------------------------------------

- **Example** :  Designing a function that prints the absolute value 

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>

int main() {

	int ival;
	printf("Enter an integer number : ");
	scanf("%d", &ival);

	printf("|%d|--> %d\n", ival, abs(ival));

	double dval;
	printf("Enter a double number : ");
	scanf("%lf", &dval);

	printf("|%f|--> %f\n", dval, fabs(dval));

	/*
		Enter an integer number : -89
		|-89|--> 89
		Enter a double number : -3.2
		|-3.200000|--> 3.200000
	*/
}

/----------------------------------------------
/----------------------------------------------