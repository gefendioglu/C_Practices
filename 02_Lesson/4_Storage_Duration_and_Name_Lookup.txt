
## Storage Duration (Lifespan) 
- **automatic storage** : It is used for variables whose lifespan ends when the program's flow is exited from the code.
  - If the first value is not given (if not initialized), it starts life with a garbage value (an indetermined value).\
  If this variable is used without it is initialized, then this situation may result in **undefined behaviour**.
  - auto variables should always been defined by initializing !!! 
  
- **static storage** : The object comes to life once and keeps its existence until the end of the program. 
  - Global variables has always static lifespan, they will be in memory until the program terminates.
  - static keyword kullanılmayan degıskenler automatic, static keyword kullanilanlar ise statik 
  - Variables that do not use the **static** keyword are --> automatic, those that use the **static** keyword are --> static
  
- **dynamic storage** 

- The variable in the static storage category in C: 
  - global variables  
  - static local variables\
  When they are defined without giving an initial value, life is started with a value of 0. 

```c
int x; 

int main()
{
    printf("x = %d", x); // x = 0 is guaranteed 
                         // because x is a global variable
}
```

/----------------------------------------------
/----------------------------------------------

- **Example** : Static Storage 

```c
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main()
{
    for (int i = 0; i < 5; ++i)
    {
        static int x = 80;     // static local variable --> static storage
        printf("x = %d\n", x);
        ++x;
    }

    /*
     x = 80
     x = 81
     x = 82
     x = 83
     x = 84  
    */  
}
```
/----------------------------------------------
/----------------------------------------------

- **Example** : Static adn Automatic Storage 

```c
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

void func()
{
    int x = 10;         // automatic, it is created every time
    static int y = 10;  // static   , it is created only once

    printf("x = %d   y = %d\n", x, y);

    ++x;
    ++y;
}

int main()
{
    func();
    func();
    func();
    func();

    /*
    x = 10   y = 10
    x = 10   y = 11
    x = 10   y = 12
    x = 10   y = 13
    */  
}
```

/----------------------------------------------
/----------------------------------------------

### Scope Definition
- Where can I legally use a declared name  in the code?
- It is a concept related to names and every name has a scope.
- Scope definition is closely related to the concept of name-lookup.\
It gives a name lookup error for the errors originating from the compiler scope concept. 

- scope categories (scoping rules) in C (different than C++):
  - file scope :
    - Usability for a name in the entire code space from the point at which it is defined to the end of the relevant source file
    - All names declared in global namespace in C --> file scope 
  - block scope (local scope): 
    - If a name is declared in a block --> block scope
    - The name can be used anywhere from the point where it is defined in the block to the end of the related block.
  - function prototype scope
  - function scope

  
/----------------------------------------------
/----------------------------------------------

- **Example** : Can a name be given to more than one entity?
  - YES; but their scope must be different.
  - A name can not be given to more than one entity in the same scope. 

```c
int x = 10;    // OK

int main()
{
    double x = 10;   // OK, scope is different                    
}
```

```c
int x = 10;    

int main()
{
    double x = 10; // OK, but not preferable!!
	if (x > 5)
	{
		int x = 45; // OK, but not preferable!!
	}
}
```

/----------------------------------------------
/----------------------------------------------

## Name-Lookup Rules in C
- The name is searched in an order.
- When the searched name is found, the name-lookup is terminated and will not continue.
- Using the names found in the block in C
   - up to the point where the name is used in the block in which it is used
   - if not found --> it is searched within the enclosing block.
   - If not found --> it is searched in the global area from the beginning of the file to the place where the name is used.
   - if not found --> syntax error 
   
```c
void x(void);

int main()
{
    int x = 10;
    x(); // NOK, name-lookup error 
}
```

### Name Hiding / Name Masking / Name Shadowing
   - The names defined in the block mask the same names in the global namespace
   - In this case, it is not possible to use the global name in C.
   - Then compilers warn of any local error.
   - In C++, if the name is used as an operand with the ::x scope resolution operator, it is searched in the global namespace
   - There is no way in both C and C++ to deal with name-hiding at the block level. 

```c
int x = 10;

int main()
{
    int x = 45
    printf("x = %d", x); // x --> 45, name shadowing because of local x
                         // C++ --> printf("::x = %d", ::x); x --> 10
}
```


```c
int main()
{
    int printf = 45
    printf("Hello World"); // NOK, syntax error, printf is not a function
    ++printf;              // OK 
```


```c
int main()
{
    void printf(int);
    printf("Hello World");   // NOK, syntax error, name shadowing
    printf(12);              // OK 
```


```c
void foo(int x){
    printf("x = %d\n", x);
} // end of x usage
```


```c 
int x = 1000;

int main()
{
    int x = x; // NOK, Undefined Behaviour (UB)
    // Warning C6001 Using uninitialized memory 'x'
    // right x is initialized garbage value  
}
```
 
/----------------------------------------------
/----------------------------------------------

- **Example** : Scope and Name-Lookup 

```c
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int x = 1000;

void foo() {
    printf("x = %d\n", x); // x = 1000
}

int main()
{
    printf("x = %d\n", x);         // x = 1000
    int x = 500;
    printf("x = %d\n", x);         // x = 500
    {
        printf("x = %d\n", x);     // x = 500
        int x = 250;
        printf("x = %d\n", x);     // x = 250
        {
            printf("x = %d\n", x); // x = 250
            int x = 125;
            printf("x = %d\n", x); // x = 125
        }
        printf("x = %d\n", x);     // x = 250
    }
    printf("x = %d\n", x);         // x = 500  
}
```

/----------------------------------------------
/----------------------------------------------

